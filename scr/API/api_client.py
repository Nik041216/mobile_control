import json
import requests
import websockets
import asyncio
import platform
from typing import List, Dict, Any
import scr.BD.bd_users.bd_server_user as bd_update


class WaterUtilityAPIClient:
    def __init__(self, base_url: str, username: str, password: str):
        self.base_url = base_url
        self.username = username
        self.password = password
        self.session = requests.Session()
        self.websocket_task = None
        self.running = False
        self.websocket = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

    async def connect_websocket(self, employee_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        ws_url = f"ws://{self.base_url.replace('http://', '').replace('https://', '')}/ws/{employee_id}?username={self.username}&password={self.password}"
        self.running = True
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {ws_url}")

        while self.running:
            try:
                async with websockets.connect(ws_url) as websocket:
                    self.websocket = websocket  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {employee_id}")

                    while self.running:
                        message = await websocket.recv()
                        data = json.loads(message)
                        print(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data['message']}")
                        print(f"üìã –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['task_ids']}")
                        if data:
                            bd_update.select_task_data_for_update()

            except websockets.exceptions.ConnectionClosed:
                print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebSocket –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                await asyncio.sleep(5)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket: {e}")
                await asyncio.sleep(5)

    async def start_websocket(self, employee_id: int):
        """–ó–∞–ø—É—Å–∫ WebSocket —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π event loop (–¥–ª—è –ü–ö –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤)"""
        self.websocket_task = asyncio.create_task(self.connect_websocket(employee_id))

    async def stop_websocket(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket"""
        print("–ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
        self.running = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if self.websocket and not self.websocket.closed:
            try:
                await self.websocket.close()
                print("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.websocket_task:
            self.websocket_task.cancel()
            try:
                await self.websocket_task  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            except asyncio.CancelledError:
                print("WebSocket –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏: {e}")
            self.websocket_task = None

        print("WebSocket –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def _make_request(self, method: str, endpoint: str,
                      data: Dict[str, Any] = None, params: Dict[str, Any] = None) -> Dict[str, Any]:
        url = f"{self.base_url}/{endpoint}"
        params = params or {}
        params.update({"username": self.username, "password": self.password})

        try:
            if method == "GET":
                response = self.session.get(url, params=params)
            elif method == "POST":
                response = self.session.post(url, json=data, params=params)
            else:
                raise ValueError(f"Unsupported HTTP method: {method}")

            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"Error making request to {url}: {e}")
            raise

    def login(self) -> Dict[str, Any]:
        return self._make_request("POST", "login", data={"username": self.username, "password": self.password})

    def change_flag_notification(self, task_ids: List[int]):
        return self._make_request("POST", "change_flag_notification", data=task_ids)

    def assign_tasks(self, task_ids: List[int], employee_id: int) -> Dict[str, Any]:
        data = {"task_ids": task_ids, "employee_id": employee_id}
        return self._make_request("POST", "assign_tasks", data=data)

    def get_active_meter_tasks(self, employee_id: int) -> List[Dict[str, Any]]:
        return self._make_request("GET", f"active_meter_tasks/{employee_id}")

    def get_latest_meter_readings(self, employee_id: int) -> List[Dict[str, Any]]:
        return self._make_request("GET", f"latest_meter_readings/{employee_id}")

    def get_employers_for_assign_tasks(self) -> List[Dict[str, Any]]:
        return self._make_request("GET", "employers_for_assign_tasks")

    def get_meters_from_active_tasks(self, employee_id: int) -> List[Dict[str, Any]]:
        return self._make_request("GET", f"meters_from_active_tasks/{employee_id}")

    def get_task_data_all(self) -> List[Dict[str, Any]]:
        return self._make_request("GET", "task_data_all")

    def get_task_data_new(self, employee_id: int) -> List[Dict[str, Any]]:
        return self._make_request("GET", f"task_data_new/{employee_id}")

    def get_task_data_unassigned(self) -> List[Dict[str, Any]]:
        return self._make_request("GET", "task_data_unassigned")

    def batch_update_tasks(self, task_updates: List[Dict[str, Any]]) -> Dict[str, Any]:
        data = {"tasks": task_updates}
        return self._make_request("POST", "batch_update_tasks", data=data)

    def batch_update_address(self, address_updates: List[Dict[str, Any]]) -> Dict[str, Any]:
        data = {"tasks": address_updates}  # –ò–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å
        return self._make_request("POST", "batch_update_address", data=data)
